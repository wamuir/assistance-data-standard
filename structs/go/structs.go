// DO NOT EDIT
// This file was machine generated by github.com/wamuir/assistance-data-standard/structs/go

// Package ads defines Golang types for the Assistance Data Standard (xs:schema/@version="2023-1219 Draft").
package ads

import (
	"encoding/xml"
	"fmt"
	"time"
)

type XsBase64Binary string

func (x XsBase64Binary) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsBase64Binary) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsBase64Binary(v)
	return nil
}

type XsDate time.Time

func (x XsDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01-02"), start)
}

func (x *XsDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01-02", v)
	if err != nil {
		return err
	}

	*x = XsDate(t)
	return nil
}

type XsDecimal float64

func (x XsDecimal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%f", x), start)
}

func (x *XsDecimal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v float64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsDecimal(v)
	return nil
}

type XsFloat float64

func (x XsFloat) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%f", x), start)
}

func (x *XsFloat) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v float64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsFloat(v)
	return nil
}

type XsGYearMonth time.Time

func (x XsGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01"), start)
}

func (x *XsGYearMonth) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01", v)
	if err != nil {
		return err
	}

	*x = XsGYearMonth(t)
	return nil
}

type XsInteger int64

func (x XsInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsInteger(v)
	return nil
}

type XsNonNegativeInteger int64

func (x XsNonNegativeInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsNonNegativeInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsNonNegativeInteger(v)
	return nil
}

type XsNonPositiveInteger int64

func (x XsNonPositiveInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsNonPositiveInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsNonPositiveInteger(v)
	return nil
}

type XsPositiveInteger int64

func (x XsPositiveInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsPositiveInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsPositiveInteger(v)
	return nil
}

type XsString string

func (x XsString) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsString) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsString(v)
	return nil
}

type XsTime time.Time

func (x XsTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01-02T15:04:05"), start)
}

func (x *XsTime) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01-02T15:04:05", v)
	if err != nil {
		return err
	}

	*x = XsTime(t)
	return nil
}

type XsToken string

func (x XsToken) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsToken) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsToken(v)
	return nil
}

type CDATA struct {
	Value XsString `xml:",cdata"`
}

// The root element for Assistance, Grant, and Other Transaction Data Standard documents.
type ADSDocument struct {
	// The version of the Assistance, Grant, and Other Transaction Data Standard schema used to produce the document. (see list)
	SchemaVersionUsed XsToken

	// The standard used to render a copy of the Assistance, Grant, and Other Transaction Data Standard document.
	ADSDocumentForm struct {
		// The Standard Instrument Form. Used for rendering the transaction. (see Standard Instrument Form list at dodprocurementtoolbox.com)
		StandardInstrumentForm *XsString

		// If the form used for rendering is not found in Standard Instrument Form, describe the form here.
		AlternateInstrumentForm *XsString
	}

	// Information about the system producing the XML document.
	OriginatorDetails struct {
		// The internal system identifier of the document by which it is tracked by the system referenced in DoD System or Non DoD System.
		InternalDocumentNumber XsString

		// Identifies the Department of Defense system or application used to generate the XML document.
		DoDSystem *struct {
			// The DoD Information Technology Portfolio Repository (DITPR) Number assigned to the application or system that generated the XML document.
			DITPRNumber DITPRType

			// The DoDAAC of the entity that administers the application or system that generated the XML document.
			SystemAdministratorDoDAAC DoDAACType
		}

		// Identifies the system or application used to generate the XML document when it is not a Department of Defense system or application.
		NonDoDSystem *struct {
			// The CAGE, DUNS, Activity Address Code or other identifier of the organization who administers the application or system. This may or may not be the same entity that uses the application or system.
			NonDoDEntityIdentifier struct {
				// The Activity Address Code (AAC).
				ActivityAddressCode *XsString

				// CAGE: Commercial and Government Entity.
				Cage *CAGEType

				// DUNS+4: Data Universal Numbering System identifier with four character suffix.
				Duns4Number *Duns4NumberType

				// DUNS: Data Universal Numbering System Identifier.
				DunsNumber *DunsNumberType

				// Government Unique Entity Identifier.
				GovernmentUniqueEntityIdentifier *GovernmentUniqueEntityIdentiferType

				// Use to provide an identifier that isn't provided as a distinct element.
				AlternateIdentifier *AlternateIdentifierType
			}

			// The name of the application or system.
			SystemName XsString

			// The version of the application or system.
			SystemVersion XsString
		}
	}

	// The award or solicitation instrument.
	AwardInstrument *AwardInstrumentType

	// The award modification or solicitation amendment instrument.
	ModificationInstrument *ModificationInstrumentType
}

// Award Instrument document
type AwardInstrumentType struct {
	// Data common to the entire document.
	AwardHeader AwardHeaderType

	// A description of the project or effort that is being identified on this line item.
	AwardLineItems []AwardLineItemType
}

// Award Modification Instrument.
type ModificationInstrumentType struct {
	// Data common to the entire instrument.
	ModificationHeader ModificationHeaderType

	// Information about added, changed, and deleted line items.
	ModificationLineItems []struct {
		// Contains line items that were added.
		AddedLineItems []AwardLineItemType

		// Contains line items that were removed.
		DeletedLineItems []AwardLineItemType

		// Contains line items that were modified.
		ChangedLineItems []struct {
			// Descriptive text of the changes made to the line item.
			LineItemChangeTextDetails []struct {
				// Description of the line item change that applies to the document.
				LineItemChangeText XsString

				// Location within the document structure. Used to know where to render information. (see Section list at dodprocurementtoolbox.com)
				Section *XsString
			}

			// The line item after the change was applied. The result.
			CurrentLineItem AwardLineItemType

			// The line item before the change was applied. The original.
			PreviousLineItem AwardLineItemType
		}
	}
}

type AcceptanceInspectionType struct {
	// Acceptance, Inspection or Both (see list)
	Action AcceptInspectActionType

	// Where the action takes place. (see list)
	Location AcceptInspectLocationType

	// Performance, shipment, delivery, and other criteria that the DoD acceptor and/or inspector must verify has been met by the contractor prior to stating that inspection was passed or to accepting the product/service.
	Instructions XsString
}

// Contains Address and Contact information.
type AddressContactType struct {
	// The address and organization identifiers.
	Address OrganizationDetailType

	// A contact for the organization/address.
	Contact []ContactType
}

// Award Modification Address structure.
type AddressDetailsModificationType struct {
	// Description of the address. (see Address Description list at dodprocurementtoolbox.com)
	AddressDescription *XsString

	// Description of the address when not covered by one of the address description options.
	AlternateAddressDescription *XsString

	// Records addresses and contacts that have been added, removed, or modified.
	AddressContactModificationDetails *struct {
		// Contains addresses that are added.
		AddedAddress *AddressContactType

		// Contains addresses that are removed.
		DeletedAddress *AddressContactType

		// Contains addresses that are modified.
		ChangedAddress *struct {
			// Description of the change to the address and contacts.
			AddressChangeText XsString

			// The address and contacts after the changes were applied. The results.
			CurrentAddress AddressContactType

			// The address and contacts before the changes were applied. The original.
			PreviousAddress AddressContactType
		}
	}

	// Records changes to acceptance and/or inspection instructions when the address denotes an entity performing acceptance, inspection, or both.
	AcceptanceInspection *AcceptanceInspectionType

	// Records changes to a Recipient’s business classification such as Hospital, Large, Small, etc.
	BusinessClassificationModificationDetails *struct {
		// Contains the business classification that is added.
		AddedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is removed.
		DeletedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is modified.
		ChangedBusinessClassification *struct {
			// Description of the change to the business classification.
			BusinessClassificationChangeText XsString

			// The business classification after the changes were applied.
			CurrentBusinessClassification BusinessClassificationType

			// The business classification before the changes were applied. The original.
			PreviousBusinessClassification BusinessClassificationType
		}
	}
}

// Award Address structure
type AddressDetailType struct {
	// Description of the address. (see Address Description list at dodprocurementtoolbox.com)
	AddressDescription *XsString

	// Description of the address when not covered by one of the address description options.
	AlternateAddressDescription *XsString

	// The address and organization identifiers.
	Address OrganizationDetailType

	// A contact for the organization/address. This is where you add your technical representative, etc.
	Contact []ContactType

	// Provides acceptance and/or inspection instructions when the address denotes an entity performing acceptance, inspection, or both.
	AcceptanceInspection *AcceptanceInspectionType

	// Recipient’s business classification such as Hospital, Large, Small, etc.
	BusinessClassification *BusinessClassificationType
}

type AlternateIdentifierType struct {
	// A brief title or description of the alternate identifier.
	Description XsString

	// The value of the alternate identifier.
	Value XsString
}

type AmountType struct {
	// Type of Amount. (see Amount Description list at dodprocurementtoolbox.com)
	AmountDescription XsString

	// The amount value. On an award, must be greater than zero. On a modification, may be zero or greater only when Amount Description is "Header Only - Total Value".
	Amount DecimalElement5ZeroPlusType

	// May only be provided when Amount Description is Cancellation Ceiling. Required when multiple Cancellation Ceilings are provided.
	CancellationCeilingDateAndDescription *XsString
}

// Used to provide Asslistance Listing Numbers on Assistnace documents.
type AssistanceListingInformationType struct {
	// The number of the assistance listing. Same as FAADC reporting element CFDA Number.
	AssistanceListingNumber AssistanceListingNumberType

	// The title corresponding to the assistance listing number.
	AssistanceListingTitle XsString
}

// Attachment structure.
type AttachmentType struct {
	// A description of the attached document.
	AttachmentDescription struct {
		// Description of the attachment. (see Standard Attachment list at dodprocurementtoolbox.com)
		StandardAttachment *XsString

		// Description of the attachment when not covered by one of the standard attachment options.
		OtherAttachment *XsString
	}

	// The name of the attachment including version number if applicable e.g. Scheduled GFP - 4.
	AttachmentName XsString

	// The attachment contents in binary text. Cannot be provided when Attachment Security Level is populated.
	AttachmentBinaryText *XsBase64Binary

	// The format of the attachment such as Microsoft Word, Power Point, etc. Required when Attachment Binary Text is provided. (see Attachment Data Format list at dodprocurementtoolbox.com)
	AttachmentDataFormat *XsString

	// The date the attached document was created or modified in CCYY-MM-DD format. It is not the date the document was attached to the instrument.
	AttachmentDate *XsDate

	// An identifier used within the instrument to reference the attachment.
	AttachmentNumber *XsString

	// A number such as a MIL-STD Number that describes the attachment.
	AttachmentReferenceIdentifier *XsString

	// The URL of where the attachment is located on the World Wide Web.
	AttachmentURL *XsString
}

type AwardHeaderType struct {
	// Unique Identifier for the instrument.
	InstrumentIdentifier []InstrumentIdentifierType

	// Miscellaneous instrument information.
	BasicInformation HeaderBasicInformationType

	// Article, clause or provision information that applies to the non-procurement instrument.
	ClauseInformation *struct {
		// The URL where the text of the articles, clauses or provisions in a Regulation, Supplement, or Issuing Agency can be found.
		RegulationURL []XsString

		// Information about an article, clause, or provision.
		ClauseDetails []ClauseDetailsType
	}

	// Delivery details including dates that impact the entire instrument.
	DeliveryDetails *DeliveryDetailsType

	// Addresses applicable to the award instrument. (See Address Description list at dodprocurementtoolbox.com)
	InstrumentAddresses []AddressDetailType

	// Amounts and pricing that impact the entire document. On Solicitations, use Header Currency only.
	InstrumentAmounts *InstrumentAmountsType

	// Identifies paperwork that is required to be attached to the instrument.
	InstrumentAttachments []AttachmentType

	// Dates and date periods applicable to the instrument.
	InstrumentDates InstrumentDatesType

	// Recurring payments of a fixed amount that occur on a specified schedule.
	RecurringPayments *InstallmentType

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (FSC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber []ReferenceNumberType

	// Reporting requirements including schedule and distribution.
	ReportingInformation []ReportingInformationType
}

// Top Level Line Item Details
type AwardLineItemType struct {
	// Number of the line item.
	LineItemIdentifier LineItemIdentifierType

	// A brief description of the project or program supported by the line.
	EffortDescription *XsString

	// Miscellaneous information about the line item.
	LineItemBasicInformation LineItemBasicInformationType

	// Addresses applicable to the line item.
	Addresses []AddressDetailType

	// Attachments applicable to the line item.
	Attachments []AttachmentType

	// Line item deliveries and ship-to information.
	Delivery []struct {
		// Action to be taken when the maximum total order amount is exceeded by the recipient.
		ExcessDeliveryAction *ExcessDeliveryActionType

		// Date or date ranges that relate to a delivery.
		ItemDeliveryDates []DeliveryDatesType

		// Information on deliveries that require a lead time.
		ItemSchedule []ItemScheduleType

		// Special handling and hazardous material details.
		ItemSpecialHandling []DeliverySpecialHandlingHazmatType

		// Partial delivery details.
		PartialDeliverySchedule []ItemPartialDeliveryType

		// Indicates consignee or a shipping contact must be notified to schedule a delivery.
		PreDeliveryNotification *TrueFalseType

		// Address where the delivery will be made. A second iteration where Address Description is 'Mark for Party' may be provided.
		ShipToAddress []AddressDetailType

		// Transportation information
		TransportationDetails *RoutingTransitType
	}

	// Amounts and pricing that impact the line item.
	LineItemAmounts *LineItemAmountsType

	// Article, clause or provision information that applies to the line item.
	LineItemClauses []ClauseDetailsType

	// Dates applicable to the line item that are not related to a delivery.
	LineItemDates []LineItemDatesType

	// Recurring payments of a fixed amount that occur on a specified schedule.
	RecurringPayments *InstallmentType

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (SFC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber []ItemReferenceNumberType

	// Informaiton on which reports shouldd be provided when and to whom.
	ReportingInformation []ReportingInformationType
}

// A generic start-end date only type with period description.
type BudgetPeriodsType struct {
	// Enter a name for the funding period, such as “Year One” or “Base Year”.
	FundingPeriodName XsString

	// Describes the period is currently budgeted or will be budgeted in the future.
	FundingPeriodDescription XsToken

	// Period start date in CCYY-MM-DD format.
	StartDate XsDate

	// Period end date in CCYY-MM-DD format.
	EndDate XsDate

	// The amount budgeted for the period.
	Amount DecimalElement5ZeroPlusType
}

// Business classification structure.
type BusinessClassificationType struct {
	// Type of organization such as large or small. (see list)
	OrganizationType *XsToken

	// Type of business such as disadvantaged, women owned, hospital etc.
	BusinessType []BusinessTypeType
}

// Recipient Business Type structure.
type BusinessTypeType struct {
	// Business category from the System for Award Management (SAM). (see Business Type Description list at dodprocurementtoolbox.com)
	BusinessTypeDescription XsString

	// Specific business type for the category provided in Business Type Description; from the System for Award Management (SAM). (see Business Type list at dodprocurementtoolbox.com)
	BusinessTypeValue []XsString
}

type ClauseDetailsType struct {
	// Regulation or Supplement name such as FAR, DFARS and AFARS. (see Regulation And Supplement list at dodprocurementtoolbox.com)
	RegulationOrSupplement *XsString

	// The Activity Address Code of the entity who created the article, clause or provision if the source is not found in the Regulation Or Supplement list.
	IssuingActivity *FEDAACType_NoContractor

	// Broad category that the article, clause, or provision belongs to such as payment or security. (see Clause Category list at dodprocurementtoolbox.com)
	ClauseCategory *XsString

	// The article, clause or provision number.
	ClauseNumber XsString

	// The title of the article, clause or provision.
	ClauseTitle XsString

	// The year and month the article, clause or provision became effective. (Use CCYY-MM format, where CC stands for century.)
	ClauseEffectiveDate XsGYearMonth

	// Denotes if the article, clause or provision is an alternate or a deviation.
	ClauseVariation []struct {
		// Denotes whether the article, clause or provision variation was an alternate or deviation. (see list)
		AlternateOrDeviation XsToken

		// The year and month the article, clause or provision variation became effective. (Use CCYY-MM format, where CC stands for century.)
		VariationEffectiveDate XsGYearMonth

		// When applicable, the alternate or deviation name. For example, for "Alternate A", value in Variation Name would be "A".
		VariationName *XsString
	}

	// The complete text or the filled in text of the article, clause, or provision. May only have multiple when Article Details is provided.
	ClauseText []ClauseTextType

	// Location within the document structure. Used to know where to render information. (see Section list at dodprocurementtoolbox.com)
	Section *XsString
}

// Fill-in text details needed for Referenced Clause, if applicable. Used in ReferenceClauseTextType.
type ClauseFillinTextType struct {
	// The clause or provision fill in sequence number.
	FillinSequenceNumber XsPositiveInteger

	// The text inserted into the clause or provision as denoted by the Fill In Sequence Number.
	FillinText XsString
}

// Modification/amendment strucutre to change the clause section.
type ClauseModificationType struct {
	// Contains articles, clauses or provisions that are added.
	AddedClauses []ClauseDetailsType

	// Contains articles, clauses or provisions that are removed.
	DeletedClauses []ClauseDetailsType

	// Contains articles, clauses or provisions that are modified.
	ChangedClauses []struct {
		// A brief description of the change to the article, clause or provision.
		ClauseChangeText XsString

		// The article, clause or provision after the changes were applied. The results.
		CurrentClause ClauseDetailsType

		// The article, clause or provision before the changes were applied. The original.
		PreviousClause ClauseDetailsType
	}
}

// Actual Text of the referenced clause - could be URL and title reference, full text and/or fill-in text.
type ClauseTextType struct {
	// Complete text of the article, article section, clause or provision.
	ClauseFullText *XsString

	// Complete text of the article, article section, clause or provision with html tags. Contents must be enclosed with CDATA.
	FormattedClauseFullText *CDATA

	// Use this section to provide only the fill-in text as required to complete the article, article section, clause or provision in the regulation, and apply the article, article section, clause or provision to this transaction.
	ClauseFillinText []ClauseFillinTextType

	// Information about a section under an Article. May only be provided when Clause Number denotes an Article.
	ArticleDetails *struct {
		// The number of the section within the artcile.
		ArticleSection XsString

		// The title of the section withiin the article.
		ArticleSectionTitle XsString

		// Denotes that the section text has been customized.
		ArticleSectionCustomized *TrueType
	}
}

// Not for LOA reference. Used for other than LOA reference.
type CLINAccountingDetailType1 struct {
	// Type of delivery reference. (see list)
	DeliveryReferenceDescription XsToken

	// Delivery reference code or number.
	DeliveryReferenceValue XsString
}

// Person contact detail.
type ContactType struct {
	// The title or function of the person or entity.
	TitleOrFunction *XsString

	// Name of the person or entity.
	Name XsString

	// The grade of the person when applicable.
	Grade *XsString

	// Additional information such as the Org Code that further identifies a contact. For example, "AIR-2.5.2", "SFCA-PC", etc.
	OfficeCode *XsString

	// When multiple contacts are provided, identifies the primary and secondary contact. (see list)
	PointOfEntryIdentifier *XsToken

	// Means of communication with the contact.
	ContactMethod []struct {
		// The method to be used to contact the person or entity. (see list)
		MethodDescription XsToken

		// The communications details denoted by the value in Method Description.
		MethodValue XsString
	}
}

// Marks and Numbers identifying shipping Containers.
type ContainerMarksNumbers struct {
	// A mark that will appear on all containers or items identically.
	MarkOnAll []MarkLabelType

	// Mark value to be placed on a shipment container or an item.
	SingleMark []MarkLabelType

	// Range of marks to be applied to the shipment containers or the items.
	MarkRange []MarkRangeType
}

type CurrencyDetailsType struct {
	// The textual name of the foreign currency the instrument is issued in from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	BuyingCurrency *XsString

	// The textual name of the foreign currency in which payment is authorized and will be made from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	PaymentCurrency *XsString
}

// A generic start-end date only type without period description.
type DateOnlyPeriodType struct {
	// Period start date in CCYY-MM-DD format.
	StartDate XsDate

	// Period end date in CCYY-MM-DD format.
	EndDate XsDate
}

// A generic start-end date only type with period description.
type DatePeriodDescriptionType struct {
	// Type of period. (see list)
	PeriodDescription PeriodDescriptionType1

	// Period start date in CCYY-MM-DD format.
	StartDate XsDate

	// Period end date in CCYY-MM-DD format.
	EndDate XsDate

	// Details about the funding period. May only be provided when Period Description is "Funding Period".
	FundingPeriodDetails *struct {
		// The amount budgeted for the funding period.
		FundingAmount DecimalElement5ZeroPlusType

		// The name of the funding period, such as “Year One” or “Base Year”.
		FundingPeriodName XsString
	}
}

type DatePeriodType struct {
	// The starting date of the period.
	PeriodStart DateTimeType

	// The ending date of the period.
	PeriodEnd DateTimeType
}

// Dates other than delivery, used in modification header only.
type DatesModificationHeaderOnlyType struct {
	// Effective date of the represented instrument. Date in CCYY-MM-DD format.
	InstrumentEffectiveDate XsDate

	// 'The Awardee's name, contact information, and signature date. May not be provided on an amendment to a solicitation.
	Awardee []SigneeType

	// The name, contact information, and signature date of the warranted Government official (agreements officer, grants officer, contracting officer, etc.). The signature date is also known as the Award date. Required on a modificaiton to an award.
	WarrantedOfficial *SigneeType
}

// A generic type for Date and 24 hour clock time with time zone.
type DateTimeType struct {
	// Date in CCYY-MM-DD format.
	DateElement XsDate

	// Time including time zone.
	TimeElement *struct {
		// Time using a 24 hour clock in HH:MI:SS format.
		TimeElement XsTime

		// The time zone of the value provided in Time Element. (see Time Zone list at dodprocurementtoolbox.com)
		TimeZone XsString
	}
}

type DeliveryDatesType struct {
	// Categorizes the date, month, period of the delivery. (see list)
	DeliveryDescription DeliveryDescriptionType

	// A date (and time) relevant to a delivery.
	DeliveryDate *DateTimeType

	// A month relevant to a delivery in CCYY-MM format.
	DeliveryMonth *XsGYearMonth

	// A beginning and end date (time) relevant to a delivery.
	DeliveryPeriod *DatePeriodType
}

// Delivery structure used in an award modification or solicitation amendment document.
type DeliveryDetailsModificationType struct {
	// Indicates consignee or a shipping contact must be notified to schedule a delivery.
	PreDeliveryNotification *TrueFalseType

	// Dates or date ranges that relate to a delivery.
	DeliveryDates *struct {
		// Contains delivery dates that are added.
		AddedDeliveryDates []DeliveryDatesType

		// Contains delivery dates that are removed.
		DeletedDeliveryDates []DeliveryDatesType

		// Contains delivery dates that are modified.
		ChangedDeliveryDates []struct {
			// Description of the change to the delivery date.
			DeliveryDateChangeText XsString

			// The delivery date after the change was applied. The result.
			CurrentDeliveryDate DeliveryDatesType

			// The delivery date before the change was applied. The original.
			PreviousDeliveryDate DeliveryDatesType
		}
	}

	// Delivery lead time information.
	DeliveryLeadTime *struct {
		// Contains lead time information that is added.
		AddedLeadTime []DeliveryLeadTimeType

		// Contains lead time information that is removed.
		DeletedLeadTime []DeliveryLeadTimeType

		// Contains lead time information that is modified.
		ChangedLeadTime []struct {
			// Description of the change to the lead time information.
			LeadTimeChangeText XsString

			// The lead time information after the change was applied. The result.
			CurrentLeadTime DeliveryLeadTimeType

			// The lead time information before the change was applied. The original.
			PreviousLeadTime DeliveryLeadTimeType
		}
	}

	// Information on Special handling and hazardous material.
	DeliverySpecialHandling []DeliverySpecialHandlingHazmatModificationType

	// Action to be taken when the maximum total order amount is exceeded by the recipient.
	ExcessDeliveryAction *ExcessDeliveryActionType
}

// Delivery structure used in an award document.
type DeliveryDetailsType struct {
	// Indicates consignee or a shipping contact must be notified to schedule a delivery.
	PreDeliveryNotification *TrueFalseType

	// Dates or date ranges that relate to a delivery.
	DeliveryDates []DeliveryDatesType

	// Delivery lead time information.
	DeliveryLeadTime []DeliveryLeadTimeType

	// Information on Special handling and hazardous material.
	DeliverySpecialHandling []DeliverySpecialHandlingHazmatType

	// Action to be taken when the maximum total order amount is exceeded by the recipient.
	ExcessDeliveryAction *ExcessDeliveryActionType
}

type DeliveryLeadTimeType struct {
	// Description of delivery lead time. (see list)
	LeadTimeDescription DeliveryLeadTimeQualifierType

	// The unit and value of the lead time. For example 10 workdays.
	DeliveryLeadTime DurationType

	// The specified event from whose occurrence an option is exercised or delivery is scheduled. (see list)
	LeadTimeEvent *XsToken

	// Description of the lead time event when not covered by one of the lead time event options.
	AlternateLeadTimeEvent *XsString

	// Whether or not a performance period is mandatory or negotiable. (see list)
	PerformancePeriodFirmness *XsToken

	// Comments related to the period of performance.
	PerformancePeriodComments *XsString
}

// Specify transportation special handling instructions and Hazardous material information.
type DeliverySpecialHandlingHazmatModificationType struct {
	// Contains special transportation handling instructions. (see list)
	SpecialHandlingCode *DeliverySpecialHandlingType

	// Use to provide the Hazardous Material Class Code and its source.
	HazardousMaterial *HazardousMaterialType

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

// Specify transportation special handling instructions and Hazardous material information.
type DeliverySpecialHandlingHazmatType struct {
	// Contains special transportation handling instructions. (see list)
	SpecialHandlingCode *DeliverySpecialHandlingType

	// Use to provide the Hazardous Material Class Code and its source.
	HazardousMaterial *HazardousMaterialType

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

type DistributionDetailsType struct {
	// Specify to whom the data item is to be sent.
	Addressee struct {
		// Description of the address. (see Address Description list at dodprocurementtoolbox.com)
		AddressDescription *XsString

		// Description of the address when not covered by one of the address description options.
		AlternateAddressDescription *XsString

		// Uniform Resource Location (URL) that identifies the automated information system that will be used to deliver the report.
		SystemURL *XsString

		// The address and organization identifiers.
		Address *OrganizationDetailType

		// A contact for the organization/address. This is where you add your technical representative, etc.
		Contact []ContactType
	}

	// The number of copies to be distributed if more than one is required to be sent to this address.
	NumberOfCopies *XsPositiveInteger

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

// Document number structure when followig the DFARS numbering format. Not used for non-DoD numbers following the FAR.
type DoDInstrumentNumberType struct {
	// A generic code that identifies the entity that issued the instrument.
	EnterpriseIdentifier XsString

	// Code that identifies the year
	Year XsString

	// One digit code that identifies the type of instrument. (see list)
	InstrumentTypeCode InstrumentTypeCodeType

	// Value that separates this instrument from all other instruments with the same Enterprise Identifier, Year, and Instrument Type Code.
	SerializedIdentifier XsString

	// Value that identifies the modification number of the instrument.
	InstrumentModificationIdentifier *InstrumentModificationIdentifierType

	// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
	AmendmentNumber *AmendmentNumberType
}

// A generic type for quantity of time between 2 events measured in different units.
type DurationType struct {
	// Unit describing duration value. (see list)
	DurationUnit XsToken

	// Must be greater than zero.
	DurationValue XsPositiveInteger
}

type EstimatedQuantityType struct {
	// Quantity.
	QuantityValue DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure XsString
}

type ExcessDeliveryActionType struct {
	// Amount a recipient cannot exceed. If exceeded, balance of the order will not be filled.
	CancelBalanceOrderExceedAmount *DecimalElement5OverZeroType

	// Amount a recipient cannot exceed. If exceeded, the entire order will be canceled.
	CancelEntireOrderAmount *DecimalElement5OverZeroType
}

// Document number structure when followig the FAR format. Not used for DoD numbers following the DFARS.
type FederalInstrumentNumberType struct {
	// The Activity Address Code (AAC) of the instrument issuing office.
	ActivityAddressCode DoDAACType_BadMod

	// Code that identifies the year
	Year XsString

	// One digit code that identifies the type of instrument. (see list)
	InstrumentTypeCode XsToken

	// Value that separates this instrument from all other instruments with the same Enterprise Identifier, Year, and Instrument Type Code.
	SerializedIdentifier XsString

	// Value that identifies the modification number of the instrument.
	InstrumentModificationIdentifier *XsString

	// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
	AmendmentNumber *AmendmentNumberType
}

// Financial reference codes.
type FinancialReferenceType struct {
	// Type of financial reference. (see Financial Reference list at dodprocurementtoolbox.com)
	FinancialCodeDescription XsString

	// Financial reference code or number.
	FinancialCodeValue XsString
}

type FreeFormAddressType struct {
	// The first line of the address.
	AddressLine1 XsString

	// The second line of the address if needed.
	AddressLine2 *XsString

	// The third line of the address if needed.
	AddressLine3 *XsString

	// The forth line of the address if needed.
	AddressLine4 *XsString
}

type FundingType struct {
	// Type of Funding Amount. (see list)
	FundingAmountDescription XsToken

	// The amount to be reimbursed or provided by the Government. On an award, must be greater than zero.
	FederalAmount DecimalElement5ZeroPlusType

	// The amount to be borne by the Awardee. On an award, must be greater than zero.
	NonFederalAmount DecimalElement5ZeroPlusType

	// The total amount. On an award, must be greater than zero.
	TotalAmount DecimalElement5ZeroPlusType
}

type FundingAmountsDeltasType struct {
	// Description of the change to the specified funding amount.
	FundingAmountChangeText *XsString

	// Type of Funding Amount. (see list)
	FundingAmountDescription XsToken

	// The change in the amount to be reimbursed or provided by the Government. If no changed, populate with zero.
	FederalAmountDelta DecimalElement5Type

	// The change in the amount to be borne by the Awardee. If no changed, populate with zero.
	NonFederalAmountDelta DecimalElement5Type

	// The change in the total amount. If no changed, populate with zero.
	TotalAmountDelta DecimalElement5Type
}

type HazardousMaterialType struct {
	// The source of the value provided in Class Code. (see list)
	ClassCodeSource HAZMATClassCodeSourceType

	// The hazardous material code from the source provided in Class Code Source.
	ClassCode XsString
}

// Basic information for a modificaiton instrument.
type HeaderBasicInformationModificationType struct {
	// The purpose of the instrument. (see list)
	DocumentPurpose DocumentPurposeType

	// The category of the instrument. (see list)
	EffortCategory *EffortCategoryType

	// Denotes whether or not the instrument is an emergency action requiring expedited processing. (see list)
	EmergencyRequestAward *TrueFalseType

	// The common name by which the instrument is referenced.
	InstrumentName *XsString

	// Highest government security classification to the instrument. (see list)
	InstrumentSecurityLevel *Classification

	// Pricing arrangement type applicable to the instrument. (see Pricing Arrangement list at dodprocurementtoolbox.com)
	PricingArrangementBase *XsString

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// This is the Statutory Authority under which the instrument is authorized. (see Statutory Authority list at dodprocurementtoolbox.com)
	StatutoryAuthority XsString

	// Information related to grants and assistance documents. Required on assistance instruments. May not be provided on any other instrument.
	AssistanceDetails *struct {
		// Type of pyament reporting. (see list)
		AggregateReporting *AggregateReportingType

		// Type of assistance award (e.g. New, Revision, etc.). (see list)
		AwardAction AwardActionType

		// Information on whether the opportunity was competed or not. (see list)
		CompetedOpportunity *TrueFalseType

		// A brief description of the purpose of the instrument.
		InstrumentDescription *XsString

		// Enter Umbrella/Master Agreement Reference or Program Title associated with the instrument.
		ProgramProjectTitle *XsString

		// The offeror’s proposal number.
		ProposalNumber *XsString

		// Denotes whether or not the assistance instrument is a research and development grant. Same as FAADC reporting element Research and Development Funds Indicator. (see list)
		ResearchAndDevelopment *TrueFalseType

		// Information on the CFDA listing related to the assistance instrument.
		AssistanceListingModificationDetails *struct {
			// Contains assistance listings that are added.
			AddedAssistanceListings []AssistanceListingInformationType

			// Contains assistance listings that are deleted.
			DeletedAssistanceListings []AssistanceListingInformationType
		}
	}

	// Text relating to the instrument that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Information related to other transaction documents. Required on Other Transaction instruments. May not be provided on any other instrument.
	OtherTransactionDetails *struct {
		// Denotes whether or not it is possible that a Production Other Transaction or contract will be issued. (see list)
		FollowOnPossible *TrueFalseType

		// The common name of the project for which the instument was issued.
		ProjectName *XsString
	}

	// The government and awardee share ratios.
	ShareRatio *ShareRatioModificationType

	// Miscellaneous information about solicitations and offers that pertain to the instrumnet.
	SolicitationOfferInformation *SolicitationOfferInformationModificationType
}

// Basic information for an instrument.
type HeaderBasicInformationType struct {
	// The purpose of the instrument. (see list)
	DocumentPurpose DocumentPurposeType

	// The category of the instrument. (see list)
	EffortCategory *EffortCategoryType

	// Denotes whether or not the instrument is an emergency action requiring expedited processing. (see list)
	EmergencyRequestAward TrueFalseType

	// The common name by which the instrument is referenced.
	InstrumentName *XsString

	// Highest government security classification to the instrument. (see list)
	InstrumentSecurityLevel *Classification

	// Pricing arrangement type applicable to the instrument. (see Pricing Arrangement list at dodprocurementtoolbox.com)
	PricingArrangementBase *XsString

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// This is the Statutory Authority under which the instrument is authorized. (see Statutory Authority list at dodprocurementtoolbox.com)
	StatutoryAuthority []XsString

	// Information related to grants and assistance documents. Required on Assitance instruments. May not be provided on any other instrument.
	AssistanceDetails *struct {
		// Type of pyament reporting. (see list)
		AggregateReporting AggregateReportingType

		// Type of assistance award (e.g. New, Revision, etc.). (see list)
		AwardAction AwardActionType

		// Denotes whether or not the opportunity was competed. (see list)
		CompetedOpportunity TrueFalseType

		// A brief description of the purpose of the instrument.
		InstrumentDescription XsString

		// Enter Umbrella/Master Agreement Reference or Program Title associated with the instrument.
		ProgramProjectTitle *XsString

		// The offeror’s proposal number.
		ProposalNumber *XsString

		// Denotes whether or not the assistance instrument is a research and development grant. Same as FAADC reporting element Research and Development Funds Indicator. (see list)
		ResearchAndDevelopment TrueFalseType

		// Information on the CFDA listing related to the assistance instrument.
		AssistanceListingInformation []AssistanceListingInformationType
	}

	// Text relating to the instrument that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Information related to other transaction documents. Required on Other Transaction instruments. May not be provided on any other instrument.
	OtherTransactionDetails *struct {
		// Denotes whether or not it is possible that a Production Other Transaction or contract will be issued. (see list)
		FollowOnPossible *TrueFalseType

		// The common name of the project for which the instument was issued.
		ProjectName XsString
	}

	// The government and awardee share ratios.
	ShareRatio *ShareRatioType

	// Miscellaneous information about solicitations and offers that pertain to the transaction.
	SolicitationOfferInformation *SolicitationOfferInformationType
}

type InstallmentType struct {
	// How often the payments occur. (see list)
	PaymentFrequency XsToken

	// The maximum number of payments.
	MaximumPayments *XsPositiveInteger

	// The amount of the recurring payment.
	RecurringPaymentAmount DecimalElement5OverZeroType

	// The beginning and end dates for the recurring payments.
	PaymentPeriod DateOnlyPeriodType
}

// Award Modifiation amount structure.
type InstrumentAmountsModificationType struct {
	// Changes to federal and non-federal obligation, project costs, and total award values.
	FundingModificationDetails *struct {
		// Description of the change to the funding amounts.
		FundingChangeText XsString

		// The change in the funding amount. If no change, enter zero. If the current funding amount is less than the previous funding amount, enter a negative number.
		FundingAmountsDeltas []FundingAmountsDeltasType

		// The funding amounts after the change was applied. The result.
		CurrentFundingAmounts []FundingType

		// The funding amountst before the change was applied. The original.
		PreviousFundingAmounts []FundingType
	}

	// The buying and/or payment currencies that apply to an award or award modification.
	HeaderCurrency *CurrencyDetailsType

	// Changes to obligation amounts.
	ObligatedAmountsModificationDetails *struct {
		// Contains obligated amounts that are added.
		AddedObligatedAmounts []InstrumentObligatedAmountType

		// Used when obligated amount is reduced to zero because of the modification.
		DeletedObligatedAmounts []InstrumentObligatedAmountType

		// Used to record changes to an existing obligated amount and/or associated information that does not result in a zero obligated amount.
		ChangedObligatedAmounts []struct {
			// Description of the change to the obligated amount.
			ObligatedAmountsChangeText XsString

			// The change in the obligated amount. If no change, enter zero. If the current obligated amount is less than the previous obligated amount, enter a negative number.
			ObligatedAmountDelta DecimalElement5Type

			// The obligated amount after the change was applied. The result.
			CurrentObligatedAmount InstrumentObligatedAmountType

			// The obligated amount before the change was applied. The original.
			PreviousObligatedAmount InstrumentObligatedAmountType
		}
	}

	// Amounts other than obligated amounts.
	OtherAmounts []AmountType
}

// Award amount structure
type InstrumentAmountsType struct {
	// Federal and non-federal obligation, project costs, and total award values. Required on assistance documents as defined under Titles 2 and 32 of the Code Of Federal Regulations (CFR).
	Funding []FundingType

	// Currencies that apply to the entire document.
	HeaderCurrency *struct {
		// The buying and/or payment currencies that apply to an award or award modification. Only provide if one or both of the Buying and Payment currencies is not U.S. Dollars.
		AwardCurrency *CurrencyDetailsType

		// The currency requirements for a solicitation response.
		SolicitationCurrency *struct {
			// Denotes that any currency may be used in the response. (see list)
			AnyCurrency *TrueType

			// Denotes that the response must be in US dollars. (see list)
			USDollarsOnly *TrueType

			// The textual name of the foreign currency that must be used in the response (may include US Dollar from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
			ForeignCurrency []XsString
		}
	}

	// Obligation amount. Must be greater than zero.
	ObligatedAmounts []InstrumentObligatedAmountType

	// Amounts other than obligated amounts.
	OtherAmounts []AmountType
}

// Dates other than delivery, used in award header only.
type InstrumentDatesType struct {
	// Effective date of the instrument. Date in CCYY-MM-DD format. Required on an award. May not be provided on a solicitation.
	InstrumentEffectiveDate *XsDate

	// A period of time applicable to the dcoument. Only one instance per Period Description value is allowed unless Period Description is "Funding Period".
	InstrumentPeriods []DatePeriodDescriptionType

	// The Awardee's name, contact information, and signature date. May not be provided on a solicitation.
	Awardee []SigneeType

	// The name, contact information, and signature date of the warranted Government official (agreements officer, grants officer, contracting officer, etc.). The signature date is also known as the Award date. Required on an award.
	WarrantedOfficial *SigneeType
}

// Instrument numbers relevant to the document including the instrument number of the document.
type InstrumentIdentifierType struct {
	// Federal/ DoD Agency or Service from where the instrument is originating. (see Instrument Origin list at dodprocurementtoolbox.com)
	InstrumentOrigin XsString

	// Instrument vehicle like a Coopertive Agreement etc. (see Instrument Vehicle list at dodprocurementtoolbox.com)
	InstrumentVehicle XsString

	// Instrument Number defined following the rules of the applicable DoD agency and/or vehicle.
	DoDInstrumentNumber *DoDInstrumentNumberType

	// Instrument Number defined following the rules of the applicable non-DoD agency and/or vehicle.
	FederalInstrumentNumber *FederalInstrumentNumberType

	// Use when the instrument is non-Department of Defense and cannot be mapped using the separate fields under Federal Instrument Number.
	NonDoDNumber *NonDoDNumberType

	// Describes the relationship of the instrument identifier listed to the documemt represented in the transaction. (see list)
	InstrumentDescription InstrumentDescriptionType
}

// Obligated amount structure at header level.
type InstrumentObligatedAmountType struct {
	// Obligation amount.
	ObligatedAmount DecimalElement5OverZeroType

	// One or more codes or numbers referencing a funding line. Accounting Classification Reference Number (ACRN) must be provided.
	FinancialReference []FinancialReferenceType

	// Financial information based on a line of accounting.
	LoaDetails struct {
		// Use only when the line of accounting cannot be represented by its individual components.
		Blob *XsString

		// The Line Of Accounting represented by its individual components.
		LOA []LoaCodeType

		// The DoD Standard Line Of Accounting (SLOA) represented by its individual components.
		SLOA []SLOAType
	}
}

type ItemDeliveryScheduleType struct {
	// The quantity and frequency of the delivery.
	QuantityToBeDelivered *QuantityType

	// The length of the delivery period.
	LengthOfDeliveryPeriod *DurationType

	// Number of shipments expected to complete the deliverable quantity.
	NumberOfExpectedShipments *XsPositiveInteger
}

type ItemObligatedAmountType struct {
	// Obligation amount.
	ObligatedAmount DecimalElement5OverZeroType

	// Commitment Identification Number. Unique number used to record and track a commitment in the accounting system.
	CIN []XsString

	// One or more codes or numbers referencing a funding line. Accounting Classification Reference Number (ACRN) must be provided.
	FinancialReference []FinancialReferenceType
}

type ItemOtherAmountsType struct {
	// Type of Amount. (see Amount Description list at dodprocurementtoolbox.com)
	AmountDescription XsString

	// The amount value.
	Amount DecimalElement5ZeroPlusType

	// Percent increase in the target fee or target profit. Express 4.25% as 4.25
	TargetFeePercentIncrease *DecimalElement5OverZeroType

	// Percent decrease in the target fee or target profit. Express 4.25% as 4.25
	TargetFeePercentDecrease *DecimalElement5OverZeroType
}

// Partial delivery structure. Line item only.
type ItemPartialDeliveryType struct {
	// The quantity and units for a partial delivery.
	PartialDeliveryQuantity QuantityType

	// Dates, time and period of a partial delivery.
	PartialDeliveryDates DeliveryDatesType
}

// A generic structure specifying a reference number.
type ItemReferenceNumberType struct {
	// Contains additional information when needed.
	DescriptionText *XsString

	// The item for which a reference number is being provided. (see Reference Description list at dodprocurementtoolbox.com)
	ReferenceDescription *XsString

	// Description of the reference number when not covered by one of the reference description options.
	AlternateDescription *XsString

	// The reference number which identifies the item.
	ReferenceValue *XsString

	// Provide one iteration for each referenced Purchase Request/MIPR and its corresponding Line item number. May only be provided at the line item level.
	PurchaseRequestDetails []struct {
		// The Purchase Requisition Number.
		PurchaseRequisitionNumber *XsString

		// The Military Interdepartmental Purchase Request (MIPR) Number
		MIPRNumber *XsString

		// The Purchase Request or Military Interdepartmental Purchase Request (MIPR) Line Item Number.
		PurchaseRequisitionLineItemNumber XsString
	}

	// The date that identifies the version of the item or document provided in ReferenceValue. Date in CCYY-MM-DD format.
	VersionDate *XsDate
}

type ItemScheduleType struct {
	// Reference numbers applicable to the delivery.
	DeliveryReference []CLINAccountingDetailType1

	// Delivery lead time information.
	ItemDeliveryLeadTime *DeliveryLeadTimeType

	// Schedule delivery details.
	ItemDeliverySchedule []ItemDeliveryScheduleType

	// Used to specify the marks to be placed on an item such as a tail number or a serial number.
	ItemMarks []ContainerMarksNumbers

	// Identifies marks and numbers associated with a ship-to address.
	ShippingContainerMarks []ContainerMarksNumbers
}

type LimitsType struct {
	// The type of limit. (see list)
	LimitDescription LimitDescriptionType

	// Minimum limit
	Minimum *DecimalElement5OverZeroType

	// Maximum limit
	Maximum *DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString

	// The textual name of the foreign currency the limit is provided in from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	ForeignCurrency *XsString
}

// Taxes, Obligated Amount with LOA, CIN, Total Line Amount, Percent increase, decrease in Target fee.
type LineItemAmountsType struct {
	// Currencies that apply to the line item.
	ItemCurrency *CurrencyDetailsType

	// Obligated amounts with reference to financial information.
	ItemObligatedAmount *ItemObligatedAmountType

	// Amounts other than the obligated amount. Must be provided if Multiple Line Items Information/ Group Other Amounts is not provided for this line item.
	ItemOtherAmounts []ItemOtherAmountsType
}

// Basic information structure for a line item.
type LineItemBasicInformationType struct {
	// Denotes that the line item is an option line item. (see list)
	OptionLineItem *TrueType

	// Pricing arrangement type applicable to the instrument line. (see Pricing Arrangement list at dodprocurementtoolbox.com)
	PricingArrangementBase *PricingArrangementType

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// Information related to lines on grants and assistance documents. Required on Assitance instruments. May not be provided on any other instrument.
	AssistanceDetails *struct {
		// Information on the CFDA listing related to the assistance instrument.
		AssistanceListingInformation []AssistanceListingInformationType
	}

	// Text relating to the line item that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Information related to lines on other transaction documents. Required on Other Transaction instruments. May not be provided on any other instrument.
	OtherTransactionDetails *struct {
		// Miscellaneous information about solicitations pertaining to the line item.
		LineItemSolicitationInformation *struct {
			// Solicitation conditions that are applicable to line items. (see list)
			LineItemSpecificCondition []XsToken

			// Dates that are relevant to a solicitation line item.
			LineItemSolicitationDates []struct {
				// Categorizes the date relevant to a solicitation line item. (see list)
				LineItemSolicitationDateDescription XsToken

				// A date (and time) relevant to the solicitation line item.
				LineItemSolicitationDate DateTimeType

				// If needed, contains additional information about the date on the solicitation.
				AdditionalInformation *XsString
			}

			// The details about the pricing being solicited.
			PricingDetails []struct {
				// Denotes one or more items that should be addressed when pricing.
				OtherPricing []struct {
					// The aspect to be priced. (see list)
					OtherPricingDescription XsToken

					// Indicates the delivery zone that a price is to be provided for. When Other Pricing Description is "Zone Price", either Delivery Zone or Shipping Postal Code is required; both may be provided.
					DeliveryZone []XsString

					// Denotes that the offeror is to provide the estimated number of hours associated with a labor rate. May only be provided if Other Pricing Description is Hourly Labor Rates. (see list)
					LaborRatesHoursEstimate *TrueType

					// Indicates the packing level that a price is to be provided for. May only be provided if Other Pricing Description is Packaging Price.
					PackingLevel []struct {
						// The container or material used for the packing. (see list)
						PackingContainer XsToken

						// To what level the container will be packed. May only be provided when Packing Container is "MILVAN", "SEAVAN", or "SDDC leased/controlled SEAVAN or MILVAN (SDDCVAN)". (see list)
						PackingCapacity *XsToken

						// Specifies who will pack the container. Not provided when Packing Capacity is "Empty". (see list)
						Packer *XsToken

						// Use when a second packer is expected. May only be provided when Packing Capacity is "Less Than Capacity"
						AdditionalPacking *struct {
							// To what level the container will be packed by the second packer. (see list)
							AdditionalPackingCapacity *XsToken

							// Specifies who will pack the container. (see list)
							AdditionalPacker *XsToken

							// Commingled with commercial cargo in accordance with the SDDC Container Agreement and Rate Guide. Only used when Packer is "Ocean Carrier". (see list)
							CommingledPacking *TrueType
						}
					}

					// Indicates the packaging protection level (preservation) that a price is to be provided for. May only be provided if Other Pricing Description is Packaging Protection Level (Preservation) Price.
					ProtectionLevel *struct {
						// Method and sub-method of preservation (MIL-STD-2073-1D, appendix J). (see list)
						PreservationMethod XsToken

						// Specialized preservation codes (MIL_STD_2073-1D J.4.2.1).
						SpecialPreservationCode []XsToken

						// Supplementary or Special Requirements. (MIL_STD_2073-1D J.1.4.c)
						SupplementaryOrSpecialRequirements *XsString
					}

					// The general shipping area for quoting purposes. When Other Pricing Description is "Zone Price", either Delivery Zone or Shipping Postal Code is required; both may be provided.
					ShippingPostalCode []PostalCodeType
				}

				// Denotes the quantity ranges when prices are being solicited for step ladder pricing.
				QuantityRangePricing *struct {
					// The quantity range for which a price is being solicited.
					QuantityRange []QtyAmountRangeType

					// The unit of measure of the quantity range. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
					UnitOfMeasure XsString
				}
			}

			// Provides set aside percentage and organization type. If not provided, the solicitation is unrestricted.
			SetAsideDetails *SetAsideDetailsType
		}

		// Ordering information pertinent to the line item.
		OrderingInformation *struct {
			// The estimated total quantity to be ordered. The actual order quantity may be higher or lower.
			EstimatedQuantity *EstimatedQuantityType

			// Ordering limits on the line item.
			Limits []LimitsType

			// Permitted variation in quantity.
			OrderVariation *OrderVariationType
		}

		// Details of the product or services ordered.
		ProductServicesOrdered ProductServiceQuantityType
	}
}

// Date structure for a line item.
type LineItemDatesType struct {
	// Description of the date. (see list)
	LineItemDateDescription XsToken

	// A specific date (and time if needed).
	LineItemDate *DateTimeType

	// Date in CCYY-MM format.
	LineItemMonth *XsGYearMonth

	// Denotes a range of dates.
	LineItemPeriod *DatePeriodType

	// Details about the funding period. May only be provided when Line Item Date Description is "Funding Period".
	FundingPeriodDetails *struct {
		// The amount budgeted for the funding period.
		FundingAmount DecimalElement5ZeroPlusType

		// The name of the funding period, such as “Year One” or “Base Year”.
		FundingPeriodName XsString
	}
}

// Line item type and numbering.
type LineItemIdentifierType struct {
	// The type of line item. (see list)
	LineItemType XsToken

	// The first part of the line item. Must be alphanumeric.
	LineItemBase XsString

	// Extension added to the line item base. Must be alphanumeric.
	LineItemExtension *XsString
}

type LoaCodeType struct {
	// Component description. (see LOA Component list at dodprocurementtoolbox.com)
	ComponentTitle XsString

	// The value of the component listed in Component Title.
	ComponentValue XsString
}

// The longitude and latitude coordinates of a location.
type LocationCoordinatesType struct {
	// The location North or South of the Equator.
	Latitude DecimalElementCoordinateType

	// The location East or West of the Prime Meridian.
	Longitude DecimalElementCoordinateType
}

// Identifies the label that should be contained with the mark
type MarkLabelType struct {
	// The text of the mark.
	MarkValue XsString

	// When provided, this is the label that identifies the marking and is part of the marking. For example, "Serial Number:", "Manufacturer Part Number -", etc.
	MarkLabel *XsString
}

type MarkRangeType struct {
	// Starting number of the sequential range
	RangeStart XsString

	// Ending number of the sequential range
	RangeEnd XsString

	// When provided, this is the label that identifies the marking and is part of the marking. For example, "Serial Number:", "Manufacturer Part Number -", etc.
	MarkLabel *XsString
}

// Free form text and the Section of the document it belongs to.
type MiscellaneousTextDetailsType struct {
	// Unformatted text.
	MiscellaneousText *XsString

	// Formatted text with html tags. Contents must be enclosed with CDATA.
	FormattedMiscellaneousText *XsString

	// Location within the document structure. Used to know where to render information. (see Section list at dodprocurementtoolbox.com)
	Section *XsString
}

// Data common to the entire award modification or solicitation amendment instrument.
type ModificationHeaderType struct {
	// The unique identifier of the modified or amended instrument.
	InstrumentIdentifier InstrumentIdentifierType

	// Records instrument identifiers that have been added, removed, or modified.
	InstrumentIdentifierModificationDetails []struct {
		// Contains instrument identifiers that are added.
		AddedInstrumentIdentifier []InstrumentIdentifierType

		// Contains instrument identifiers that are removed.
		DeletedInstrumentIdentifier []InstrumentIdentifierType

		// Contains instrument identifiers that are modified.
		ChangedInstrumentIdentifier []struct {
			// Description of the change to the instrument identifier.
			InstrumentIdentifierChangeText XsString

			// The instrument identifier after the changes were applied. The results.
			CurrentInstrumentIdentifier InstrumentIdentifierType

			// The instrument identifier before the changes were applied. The original.
			PreviousInstrumentIdentifier InstrumentIdentifierType
		}
	}

	// Miscellaneous instrument information.
	BasicInformation HeaderBasicInformationModificationType

	// Article, clause or provision information that applies to the non-procurement instrument.
	ClauseInformation *struct {
		// 'The URL where the text of the articles, clauses or provisions in a Regulation, Supplement, or Issuing Agency can be found.
		RegulationURL []XsString

		// Records articles, clauses or provisions that have been added, removed, or modified.
		ClauseModificationDetails *ClauseModificationType
	}

	// Delivery details including dates that impact the entire instrument.
	DeliveryDetails *DeliveryDetailsModificationType

	// Identifies paperwork that is required to be attached to the instrument.
	InstrumentAttachments *struct {
		// Contains attachments that were added.
		AddedAttachments []AttachmentType

		// Contains attachments that were removed.
		DeletedAttachments []AttachmentType

		// Contains attachments that were modified.
		ChangedAttachments []struct {
			// Description of the change to the attachment.
			AttachmentChangeText XsString

			// The attachment after the change was applied. The result.
			CurrentAttachment AttachmentType

			// The attachment before the change was applied. The original.
			PreviousAttachment AttachmentType
		}
	}

	// Information pertinent to the modification instrument.
	ModificationDetails struct {
		// For an Award Modification, the instrument number(s) of the award or one or both of the ACO odification and PCO Modification to which the modification is being applied.
		DocumentsBeingModified []struct {
			// The instrument number whose Instrument Effective Date and/or Instrument Periods are being changed.
			DocumentBeingModified InstrumentIdentifierType

			// The signature date of the document being modified in CCYY-MM-DD format.
			DocumentBeingModifiedSignedDate XsDate
		}

		// A short text description of the purpose and content of the modification or amendment.
		ModificationDescription XsString

		// The reason for the modification based on the requirements of the Federal Procurement Data System (FPDS). (see Modification Reason list at dodprocurementtoolbox.com)
		ModificationReason *XsString

		// Reasons for the modification in addition to the one that would be reported to the Federal Procurement Data System (FPDS). (see Additional Modification Reasons list at dodprocurementtoolbox.com)
		AdditionalModificationReason []XsString

		// The project number.
		ProjectNumber *XsString

		// Information relevant to an amendment. May not be used for modifications.
		AmendmentInformation *struct {
			// The number of copies that is to be completed and signed by a recipient to acknowledge receipt of the amendment document.
			AcknowledgeReceiptCopies *XsPositiveInteger

			// Amendment text that does not change the text of the solicitation such as questions and answers.
			AmendmentDescriptiveText *XsString

			// Indicates whether or not the hour and date specified for receipt of Offers is extended. (see list)
			OfferReceiptExtended TrueFalseType
		}

		// For a modification, must provide the addresses of the issuing office and the recipient. For a solicitation amendment, must provide the address of the issuing office.
		ModificationAddresses []AddressDetailType

		// Authorization and recipient signature requirement for the modification. Required on modifications; not allowed on amendments.
		ModificationAuthority *struct {
			// States whether or not the recipient is required to sign the modification document.
			RecipientSignatureRequired TrueFalseType

			// The authority under which the change order is issued.
			ChangeOrderAuthority *XsString

			// Denotes that the modification was made to reflect administrative changes pursuant to the authority of FAR 43.103(b)
			AdministrativeChanges *TrueType

			// The authority under which the supplemental agreement is entered.
			SupplementalAgreementAuthority *XsString

			// The type of modification and authority if not covered by a Change Order, Supplemental Agreement, or Administrative Changes authority.
			OtherAuthority *XsString
		}
	}

	// Addresses being added, changed, or deleted by the modification.
	ModificationInstrumentAddresses []AddressDetailsModificationType

	// Amounts and pricing that impact the entire instrument. On Amendments, use Header Currency only.
	ModificationInstrumentAmounts *InstrumentAmountsModificationType

	// Changes to dates and date periods applicable to the instrument(s) being modified.
	ModifiedInstrumentDates []ModifiedDatesHeaderOnlyType

	// Effective Date and signatures applicable to the represented instrument.
	InstrumentDates DatesModificationHeaderOnlyType

	// Recurring payments of a fixed amount that occur on a specified schedule. Do not provide on a Solicitation.
	RecurringPayments *struct {
		// Contains the recurring payments information that were added.
		AddedRecurringPayments *InstallmentType

		// Contains recurring payments information that was removed.
		DeletedRecurringPayments *InstallmentType

		// Contains recurring payments information that was modified.
		ChangedRecurringPayments *struct {
			// Description of the change to the recurring payments.
			RecurringPaymentsChangeText XsString

			// The recurring payments after the change was applied. The result.
			CurrentRecurringPayments InstallmentType

			// The recurring payments before the change was applied. The original.
			PreviousRecurringPayments InstallmentType
		}
	}

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (FSC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber *struct {
		// Contains reference numbers that were added.
		AddedReferenceNumber []ReferenceNumberType

		// Contains reference numbers that were removed.
		DeletedReferenceNumber []ReferenceNumberType

		// Contains reference numbers that were modified.
		ChangedReferenceNumber []struct {
			// Description of the change to the reference number.
			ReferenceNumberChangeText XsString

			// The reference number after the change was applied. The result.
			CurrentReferenceNumber ReferenceNumberType

			// The reference number before the change was applied. The original.
			PreviousReferenceNumber ReferenceNumberType
		}
	}

	// Changes to the reporting requirements including schedule and distribution.
	ReportingInformation []ReportingInformationModificationType
}

type ModifiedDatesHeaderOnlyType struct {
	// Records changes to the effective date of the instrument being modified. Date in CCYY-MM-DD format. May not be provided on an amendment.
	InstrumentEffectiveDate *XsDate

	// Records changes to a period of time applicable to the instrument being modified.
	InstrumentPeriods []DatePeriodDescriptionType
}

type OrderVariationType struct {
	// Variation expressed as a percentage.
	Percentage *struct {
		// Express 4.25% as 4.25
		PercentUnder *DecimalElement5ZeroPlusType

		// Express 4.25% as 4.25
		PercentOver *DecimalElement5ZeroPlusType
	}

	// Variation expressed as a discrete quantity.
	Quantity *struct {
		// The quantity by which the order can be below the expected quantity.
		QuantityUnder *DecimalElement5OverZeroType

		// The quantity by which the order can be above the expected quantity.
		QuantityOver *DecimalElement5OverZeroType

		// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
		UnitOfMeasure XsString
	}
}

type OrganizationAddressType struct {
	// The address in free form text.
	FreeFormAddress *FreeFormAddressType

	// Address structure for real property as defined by the DoD Business Enterprise Architecture (BEA).
	RealPropertyAddress *RealPropertyAddressType

	USPostalAddress *USPostalAddressType
}

// Generic Organization Details - Common for supplier, buyer, recipient etc.
type OrganizationDetailType struct {
	// Organization Identifier.
	OrganizationID OrganizationIDType

	// Required if the organization cannot be identified in the "OrganizationId" with an acceptable alternative.
	OrganizationNameAddress *OrganizationNameAddressType
}

// Organization ID as pre-defined by various entities. Examples are DUNS, CAGE, DoDAAC etc. In accordance with DoD BTA BEA 4.1 OV-7 ORGANIZATION_IDENTIFIER entity.
type OrganizationIDType struct {
	// CAGE: Commercial and Government Entity.
	Cage *CAGEType

	// Three character alpha Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryCode *XsString

	// DODAAC: Department of Defense Activity Address Code.
	DoDAAC *DoDAACType

	// DUNS+4: Data Universal Numbering System identifier with four character suffix.
	Duns4Number *Duns4NumberType

	// DUNS: Data Universal Numbering System Identifier.
	DunsNumber *DunsNumberType

	// The Electronic Funds Transfer (EFT) indicator.
	EFTIndicator *XsString

	// An Employer Identification Number (EIN) issued by the IRS and used to identify a business entity. Also known as a federal tax identification number.
	EmployerIdentificationNumber *XsString

	// Government Unique Entity Identifier.
	GovernmentUniqueEntityIdentifier *GovernmentUniqueEntityIdentiferType

	// MAPAC: Military Assistance Program Address Code.
	Mapac *MAPACType

	// Number obtained from the Social Security Administration (SSA) that identifies an individual.
	SocialSecurityNumber *XsString

	// Delivery Zones: Values include "CONUS", "WORLD".
	Zone *XsString

	// Use to provide other identifiers that aren't provided as distinct elements.
	AlternateIdentifier []AlternateIdentifierType

	// The principal place of performance code description as reported in the Assistance Award Report. Required when Address Description is "Principal Place Of Performance". Not allowed for any other Address Description values.
	PrincipalPlaceOfPerformanceCode *struct {
		// Denotes that the instrument will be performed in mutliple states.
		MultiState *TrueType

		// The U.S. state. (see U.S. State list at dodprocurementtoolbox.com)
		StateWide *XsString

		// Denotes that the instrument will be performed in a foreign country.
		ForeignCountry *struct {
			// The textual name of the country from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoo lbox.com)
			Country XsString

			// Short description of where, in the specificed country, that the activity will be performed.
			LocationDescription XsString
		}

		// Denotes that the instrument will be performed on a native american reservation.
		NativeAmericanReservation *struct {
			// The name of the U.S. City.
			City XsString

			// The U.S. state. (see U.S. State list at dodprocurementtoolbox.com)
			State XsString
		}

		// Provide when the principal place of performance is city-, county-, or single zip code- wide.
		OtherPlaceOfPerformance *struct {
			// States the principal place of performance is city-, county-, or single zip code- wide. (see list)
			Designation XsToken

			// 5 digit postal code used in the United States.
			USZipCode XsString

			// 4 digit postal code extension used in the United States.
			USZipCodeExtension XsString
		}
	}

	// The designator that distinguishes one postal zone from another. May only be used on a solicitation when Address Description is Ship To.
	ShippingPostalCode *PostalCodeType
}

// Organization Name and Address generic type.
type OrganizationNameAddressType struct {
	// The name of the organization.
	OrganizationName XsString

	// The address of the organization.
	OrganizationAddress OrganizationAddressType

	// The longitude and latitude coordinates of the address.
	OrganizationCoordinates *LocationCoordinatesType
}

type PostalCodeType struct {
	// 5 digit postal code used in the United States.
	USZipCode *XsString

	// 4 digit postal code extension used in the United States.
	USZipCodeExtension *XsString

	// Postal zone designator for non-US addresses.
	ForeignPostalCode *XsString
}

type ProductServiceIdentifierType struct {
	// Label that identifies a related set of product service data. It will not appear on the rendered document.
	ProductServiceGroup *XsString

	// Description of the Data Value contents. (see Product Service Data list at dodprocurementtoolbox.com)
	DataDescription XsString

	// The value associated with the product or service.
	DataValue XsString
}

// Product/Service and the quantity being purchased.
type ProductServiceQuantityType struct {
	// States whether the line item is for a product or for a service. (see list)
	ProductOrService XsToken

	// Description of the product or service.
	ProductServiceDescription XsString

	// Quantity ordered.
	Quantity *DecimalElement5OverZeroType

	// Specifies whether or not the item requires UII marking.
	ItemUIDRequired *TrueType

	// Type of unit price. (see list)
	PriceBasis []XsToken

	// The unit of measure. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString

	// Price per unit. Cannot be provided when Price Basis is "Not Separately Priced" or the other transaction instrument is a solicitation.
	UnitPrice *XsFloat

	// Data about the product or service.
	ProductServiceData []ProductServiceIdentifierType
}

type QuantityType struct {
	// Quantity.
	QuantityValue DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure XsString
}

// Start, End Value only
type QtyAmountRangeType struct {
	// The lower end of the amount range or amount threshold.
	StartValue DecimalElement5ZeroPlusType

	// The upper end of the amount range.
	EndValue *DecimalElement5OverZeroType
}

// Address elements as defined in the DoD BTA BEA
type RealPropertyAddressType struct {
	// The designator that distinguishes one apartment or suite from another within the same street address.
	AptSuiteNumber *XsString

	// The code that stands for a directional portion of a street name. (see list)
	StreetDirectionCode *XsToken

	// The term commonly used to refer to the street of the address.
	StreetName *XsString

	// The designator that distinguishes one street address from another within the same street.
	StreetNumber *XsString

	// The code that stands for the type of street of the address as found in the United States Postal Service (USPS) Publication 28 Appendix C Street Abbreviations (April 2012). (see list)
	StreetTypeCode *XsToken

	// The General Services Administration (GSA) Geographic Locator Code (GLC) used to identify the city in which the real property asset or organizational unit is located or the city nearest to the asset. The nearest city shall be in the same county as the asset.
	GSAGLCCityCode XsString

	// The General Services Administration (GSA) Geographic Location Code (GLC) used to identify the primary subdivision of a country such as a state, the District of Columbia, or a possession in which the real property asset or organizational unit is located.
	GSAGLACountryPrimaryDivisionCode XsString

	// The General Services Administration (GSA) Geographic Location Code (GLC) used to identify the county or county equivalent in which the real property asset or site is located.
	GSAGLACountrySubdivisionCode XsString

	// Country code based on FIPS 10-4 as displayed by the General Services Administration (GSA) Worldwide Geographic Location Codes (GLC).
	CountryFIPSCode *XsString

	// Three character alpha Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryA3Code *XsString

	// Three digit numeric Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryN3Code *XsString

	// The textual name of the country from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryName XsString

	// The narrative geographic description of the Location.
	LocationDirectionsText *XsString

	// Postal Code of an address. See Postcodes from the Universal Postal Union for the correct values.
	PostalZoneCode XsString
}

// A generic structure specifying a reference number.
type ReferenceNumberType struct {
	// Contains additional information when needed.
	DescriptionText *XsString

	// The item for which a reference number is being provided. (see Reference Description list at dodprocurementtoolbox.com)
	ReferenceDescription *XsString

	// Description of the reference number when not covered by one of the reference description options.
	AlternateDescription *XsString

	// The reference number which identifies the item.
	ReferenceValue XsString

	// Location within the document structure. Used to know where to render information. (see Section list at dodprocurementtoolbox.com)
	Section *XsString

	// The date that identifies the version of the item or document provided in ReferenceValue. Date in CCYY-MM-DD format.
	VersionDate *XsDate
}

type ReportDeliveryLeadTimeType struct {
	// Description of delivery lead time. (see list)
	LeadTimeDescription DeliveryLeadTimeQualifierType

	// The unit and value of the lead time. For example 10 workdays.
	DeliveryLeadTime DurationType

	// The specified event from whose occurrence an option is exercised or delivery is scheduled. (see list)
	LeadTimeEvent *XsToken

	// Description of the lead time event when not covered by one of the lead time event options.
	AlternateLeadTimeEvent *XsString
}

// Captures changes made to reporting information on a modification.
type ReportingInformationModificationType struct {
	// Use to add a required report.
	AddedReportingInformation []ReportingInformationType

	// Use to remove a report that is no longer required.
	DeletedReportingInformation []ReportingInformationType

	// Use to change the schedule and distribution information of a required report.
	ChangedReportingInformation []struct {
		// Description of the change to the reporting information.
		ReportingInformationChangeText XsString

		// The reporting information after the change was applied. The result.
		CurrentReportingInformation ReportingInformationType

		// The reporting information before the change was applied. The original.
		PreviousReportingInformation ReportingInformationType
	}
}

// Used in reporting information.
type ReportingInformationType struct {
	// The type of report that is to be provided. (see Report Description list at dodprocurementtoolbox.com)
	ReportDescription *XsString

	// Description of the report when not covered by one of the report description options.
	AlternateReportDescription *XsString

	// When the final report must be provided.
	FinalReportSchedule struct {
		// Denotes that the final report is due the same date the contract ends. (see list)
		AtContractEnd *TrueType

		// The number of days after the instrument ends that the final report must be provided.
		DaysAfterContractEnd *XsPositiveInteger

		// The specific date that the final report is to be provided in CCYY-MM-DD format.
		SpecificDate *XsDate
	}

	// When and how often the interim reports must be provided.
	InterimReportSchedule *struct {
		// How often the report shall be provided. (see list)
		ReportFrequency XsToken

		// Dates associated with the Report.
		ReportDates []struct {
			// Description of the provided date such as date of first submission. (see list)
			ReportDateDescription XsToken

			// Date in CCYY-MM-DD format.
			ReportDate *XsDate

			// Report lead time information.
			ReportLeadTime *ReportDeliveryLeadTimeType

			// Contains relevant information that cannot be provided elsewhere.
			AdditionalInformation *XsString
		}
	}

	// To whom and how many copies are to be delivered.
	DistributionDetails []DistributionDetailsType
}

type RoutingTransitType struct {
	// Method or type of transportation. (see list)
	TransportationMethod *TransportationMethodType

	// Level of transportation service or billing service offered by the carrier. For emergency orders, the transportation requirements. (see list)
	TransportationServiceLevel *TransportationServiceLevelType
}

type SetAsideDetailsType struct {
	// The set aside percent. If a total set aside, specify 100%. Express 45% as 45
	SetAsidePercent XsPositiveInteger

	// The type of business the set aside percentage is for. For example, HubZone Small Business. (see Set Aside Small Business Type list at dodprocurementtoolbox.com)
	SmallBusinessType XsString
}

type ShareRatioModificationType struct {
	// Contains the share ratio that is added.
	AddedShareRatio *ShareRatioType

	// Contains the share ratio that is removed.
	DeletedShareRatio *ShareRatioType

	// Used to record changes to share ratio.
	ChangedShareRatio *struct {
		// Description of the change to the share ratio.
		ShareRatioChangeText XsString

		// The share ratio after the changes were applied. The results.
		CurrentShareRatio ShareRatioType

		// The share ratio before the changes were applied. The original.
		PreviousShareRatio ShareRatioType
	}
}

type ShareRatioType struct {
	// The percentage of costs to be reimbursed by the Government.
	FederalShare []ShareType

	// The percentage of costs to be borne by the Awardee.
	NonFederalShare []ShareType
}

type ShareType struct {
	// The type of sharing arrangement.
	ShareType struct {
		// The dollar amount of the share.
		ShareAmount *XsString

		// The share percentage. Express 4.25% as 4.25.
		SharePercentage *DecimalElement5OverZeroType
	}

	// The cap amount.
	CapAmount *DecimalElement5OverZeroType

	// May be used when multiple share ratios are provided to describe when a specific share percentage would be applied.
	ShareDescription *XsString
}

// Carries signature date and name and contact information of the signer.
type SigneeType struct {
	// Date in CCYY-MM-DD format.
	SignatureDate XsDate

	// Name and contact information of the signee.
	SigneeDetails ContactType
}

type SLOAType struct {
	// SLOA Component description. (see SLOA Component list at dodprocurementtoolbox.com)
	SLOAComponentTitle XsString

	// The value of the component listed in SLOA Component Title.
	SLOAComponentValue XsString
}

// Captures changes made to a solicitation or offer.
type SolicitationOfferInformationModificationType struct {
	// Description of the change to the solicitation Information.
	SolicitationOfferInformationChangeText XsString

	// The solicitation information after the changes were applied. The results.
	CurrentSolicitationOfferInformation SolicitationOfferInformationType

	// The solicitation information before the changes were applied. The original.
	PreviousSolicitationOfferInformation SolicitationOfferInformationType
}

// Captures solicitation and Offer/Bid information that appears on an award/mod document.
type SolicitationOfferInformationType struct {
	// The number of days from the date for receipt of offers that, if the government accepts the offer in that time, the offeror agrees to furnish any or all items in accordance with the price set, the designated delivery point(s), and the stated schedule. If not provided by the offeror, 60 days is the default.
	AcceptWithinDays *XsPositiveInteger

	// Provide when the solicitation incorporates by reference FAR 52.212-1 and 52.212-4; and Far 52.212-3 and 52.212.5 are attached.
	AddendaAttached *TrueFalseType

	// The type of award instrument that is expected to be issued such as Blanket Purchase Agreement. (see list)
	ExpectedAwardInstrumentVehicle *ExpectedAwardInstrumentVehicleType

	// When FMS Solicitation is provided, contains the Foreign Military Sales Case Number if known.
	FMSCaseNumber []XsString

	// Denotes that the solicitation is for Foreign Military Sales (FMS). (see list)
	FMSSolicitation *TrueType

	// Solicitation conditions that are applicable to all line items. (see list)
	ItemSpecificCondition []ItemSpecificConditionType

	// Denotes that a multi-year contract will be awarded. (see list)
	MultiYearContract *TrueType

	// Code from the North American Industry Classification System (NAICS)
	NAICSCode *XsString

	// When provided, denotes that an offer guarantee is required. (see list)
	OfferGuaranteeRequired *TrueType

	// The number of calendar days after award that Performance and Payment Bonds must be furnished.
	PerformancePaymentBonds *XsPositiveInteger

	// Qualification requirements pertinent to the solicitation. (see list)
	QualificationRequirements []QualificationRequirementsType

	// If the contractor is required to sign the solicitation document, provide the number of copies he must provide to the issuing office.
	SignedCopies *XsPositiveInteger

	// Date the solicitation was issued in CCYY-MM-DD format.
	SolicitationIssuedDate *XsDate

	// The type of solicitation such as RFP, RFQ, or IFB.
	SolicitationType *XsToken

	// Denotes whether or not the synopsis was made available to the Governmentwide Point of Entry (GPE). Required on solicitations and amendments. (see list)
	SynopsisPosted *TrueFalseType

	// The list of amendments to the solicitation that the offeror acknowledges receiving.
	AcknowledgedAmendments []struct {
		// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
		AmendmentNumber AmendmentNumberType

		// The date the amendment became effective. (Use CCYY-MM-DD format, where CC stands for century.)
		AmendmentDate XsDate
	}

	// Information on where offers are to be delivered such as number of copies, due date, etc.
	OfferDelivery *struct {
		// Describes the place where offers are taken when hand carried.
		DepositoryLocation *XsString

		// The number of sealed copies of the offer that must be provided.
		SealedCopies *XsPositiveInteger

		// Date and time by which an offer must be delivered.
		RequiredBefore *DateTimeType
	}

	// The name, title, and signature date of the offeror.
	OfferSignature *SigneeType

	// Provides set aside percentage and organization type. If not provided, the solicitation is unrestricted.
	SetAsideDetails *SetAsideDetailsType

	// The threshold of employees or amount the offeror must meet to respond to the solicitation.
	SizeStandard *struct {
		// Total income in whole figures; for example, 6000.
		AnnualReceipts *XsPositiveInteger

		// Number of employees.
		Employees *XsPositiveInteger
	}

	// Person or entity that is the contact for the solicitation.
	SolicitationContact []ContactType

	// Dates that are relevant to a solicitation.
	SolicitationDates []struct {
		// Categorizes the date relevant to a solicitation. (see Solicitation Date Description list at dodprocurementtoolbox.com)
		SolicitationDateDescription XsString

		// A date (and time) relevant to the solicitation.
		SolicitationDate DateTimeType

		// If needed, contains additional information about the date on the solicitation.
		AdditionalInformation *XsString
	}
}

// Article title and text.
type TableOfContentsType struct {
	// The number of the article.
	ArticleNumber XsPositiveInteger

	// The textual name of the article.
	ArticleTitle XsString

	SubArticle []struct {
		// The number of the subarticle. [Would be stand alone but would need to match Article Number]
		SubArticleNumber1 XsDecimal

		// The number of the subarticle. [Would be concatenated with Artiicle Number.
		SubArticleNumber2 XsPositiveInteger

		// The textual name of the subarticle.
		SubArticleTitle XsString
	}
}

// choice between excaped text and formatted text.
type TextDetailsType struct {
	// Text with html tags. Contents must be enclosed with CDATA.
	FormattedText *XsString

	// Unformatted text. Special characters must be escaped.
	Text *XsString
}

// Mailing address based on US Postal Systems Publication 28
type USPostalAddressType struct {
	// Contains information that is not required by the US Postal Services for distribution and Delivery. For example, a mailstop code. When provided, it is the first line of a printed address.
	NonAddressDataLine *XsString

	// The person or entity within the Recipient to whom the mail should be directed. In a printed address, it is placed above the Recipient line.
	AttentionLine *XsString

	// Person or entity. In the printed address, it is placed above the Delivery Address Line or, if provided, the Alternate Location line.
	Recipient XsString

	// Provided when Delivery Address Line cannot carry the complete address. For example, 'Apt C'. In a printed address, it is placed above Delivery Address Line.
	AlternateLocation *XsString

	// The address line. In a printed address, it is placed above the City/State line.
	DeliveryAddressLine XsString

	// The designator that distinguishes a post office box address.
	PostOfficeBox *XsString

	// The designator that distinguishes one city from another.
	City *XsString

	// The designator that distinguishes one Army/Air Force Post Office (APO), Fleet Post Office (FPO), or Diplomat Post Office (DPO) from another.
	MilitaryOrFederalOverseas *XsToken

	// Designates the State, Province, or Territory within a country.
	StateOrProvince XsString

	// The designator that distinguishes one postal zone from another.
	PostalCode PostalCodeType

	// The textual name of the country from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	Country XsString
}

// Enumeration list for Acceptance and Inspection Action
type AcceptInspectActionType XsToken

func (x AcceptInspectActionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AcceptInspectActionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AcceptInspectActionType(v)
	return nil
}

// Enumeration list for Acceptance and Inspection Location
type AcceptInspectLocationType XsToken

func (x AcceptInspectLocationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AcceptInspectLocationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AcceptInspectLocationType(v)
	return nil
}

// Enumeration list for Aggregate Reporting.
type AggregateReportingType XsToken

func (x AggregateReportingType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AggregateReportingType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AggregateReportingType(v)
	return nil
}

// Four digit Amendment Number.
type AmendmentNumberType XsString

func (x AmendmentNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *AmendmentNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AmendmentNumberType(v)
	return nil
}

// Enumeration list for Award Action Type
type AwardActionType XsToken

func (x AwardActionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AwardActionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AwardActionType(v)
	return nil
}

// Enumeration list for Change Flag: add, delete
type ChangeListType_AddDelete XsToken

func (x ChangeListType_AddDelete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_AddDelete) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_AddDelete(v)
	return nil
}

// Enumeration list for Change Flag: add, delete, modify
type ChangeListType_All XsToken

func (x ChangeListType_All) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_All) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_All(v)
	return nil
}

// Enumeration list for Change Flag: modify
type ChangeListType_Modify XsToken

func (x ChangeListType_Modify) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_Modify) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_Modify(v)
	return nil
}

// Enumeration List: Security Classifications
type Classification XsToken

func (x Classification) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *Classification) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = Classification(v)
	return nil
}

// Enumeration List: Agency or Supplement Titles
type ClauseRegulationSupplementType XsToken

func (x ClauseRegulationSupplementType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ClauseRegulationSupplementType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ClauseRegulationSupplementType(v)
	return nil
}

// Enumerates all types of dates in an instrument.
type DeliveryDescriptionType XsToken

func (x DeliveryDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DeliveryDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliveryDescriptionType(v)
	return nil
}

// Enumeration List: Delivery Lead Time Descriptions
type DeliveryLeadTimeQualifierType XsString

func (x DeliveryLeadTimeQualifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DeliveryLeadTimeQualifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliveryLeadTimeQualifierType(v)
	return nil
}

// Enumeration List: Specify transportation special handling instructions.
type DeliverySpecialHandlingType XsToken

func (x DeliverySpecialHandlingType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DeliverySpecialHandlingType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliverySpecialHandlingType(v)
	return nil
}

// Enumeration list for Document Purpose
type DocumentPurposeType XsToken

func (x DocumentPurposeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DocumentPurposeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DocumentPurposeType(v)
	return nil
}

// Enumeration list for Effort Category
type EffortCategoryType XsToken

func (x EffortCategoryType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *EffortCategoryType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = EffortCategoryType(v)
	return nil
}

// Enumeration List: Expected Award Instrument Vehicle values.
type ExpectedAwardInstrumentVehicleType XsToken

func (x ExpectedAwardInstrumentVehicleType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ExpectedAwardInstrumentVehicleType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ExpectedAwardInstrumentVehicleType(v)
	return nil
}

// Enumeration List: HAZMAT Class Code Sources
type HAZMATClassCodeSourceType XsToken

func (x HAZMATClassCodeSourceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *HAZMATClassCodeSourceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = HAZMATClassCodeSourceType(v)
	return nil
}

// Enumeration list for the Instrument Type Code
type InstrumentTypeCodeType XsToken

func (x InstrumentTypeCodeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *InstrumentTypeCodeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = InstrumentTypeCodeType(v)
	return nil
}

// Enumeration list thata describes the type of instrument.
type InstrumentDescriptionType XsToken

func (x InstrumentDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *InstrumentDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = InstrumentDescriptionType(v)
	return nil
}

// Enumeration List: Item Specific Condition values.
type ItemSpecificConditionType XsToken

func (x ItemSpecificConditionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ItemSpecificConditionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ItemSpecificConditionType(v)
	return nil
}

// Enumeration list for Limit Description
type LimitDescriptionType XsToken

func (x LimitDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *LimitDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = LimitDescriptionType(v)
	return nil
}

// Enumeration list for Period Description.
type PeriodDescriptionType XsToken

func (x PeriodDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PeriodDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PeriodDescriptionType(v)
	return nil
}

// Enumeration list for Period Description.
type PeriodDescriptionType1 XsToken

func (x PeriodDescriptionType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PeriodDescriptionType1) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PeriodDescriptionType1(v)
	return nil
}

// Enumeration List: Pricing Arrangements
type PricingArrangementType XsToken

func (x PricingArrangementType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PricingArrangementType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PricingArrangementType(v)
	return nil
}

// Enumeration List: Qualification Requirements values.
type QualificationRequirementsType XsToken

func (x QualificationRequirementsType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *QualificationRequirementsType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = QualificationRequirementsType(v)
	return nil
}

// Enumeration List: Transportation Methods
type TransportationMethodType XsToken

func (x TransportationMethodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TransportationMethodType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TransportationMethodType(v)
	return nil
}

// Enumeration List: Transportation Service Levels
type TransportationServiceLevelType XsToken

func (x TransportationServiceLevelType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TransportationServiceLevelType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TransportationServiceLevelType(v)
	return nil
}

// Accounting Classification Reference Number (ACRN).
type ACRNType XsString

func (x ACRNType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *ACRNType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ACRNType(v)
	return nil
}

// Six digit Agency Accounting Identifier
type AgencyAccountingIdentifierType XsString

func (x AgencyAccountingIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *AgencyAccountingIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AgencyAccountingIdentifierType(v)
	return nil
}

type AssistanceListingNumberType XsString

func (x AssistanceListingNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *AssistanceListingNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AssistanceListingNumberType(v)
	return nil
}

// Commercial and Government Entity (CAGE) code.
type CAGEType XsString

func (x CAGEType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *CAGEType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = CAGEType(v)
	return nil
}

// Format: Decimal type with 2 fraction digits and greater than zero.
type DecimalElement2OverZeroType XsDecimal

func (x DecimalElement2OverZeroType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.2f", x), start)
}

func (x *DecimalElement2OverZeroType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement2OverZeroType(v)
	return nil
}

// Format: Decimal type with 5 fraction digits and greater than zero.
type DecimalElement5OverZeroType XsDecimal

func (x DecimalElement5OverZeroType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5OverZeroType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5OverZeroType(v)
	return nil
}

// Format: Decimal type with 5 fraction digits.
type DecimalElement5Type XsDecimal

func (x DecimalElement5Type) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5Type) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5Type(v)
	return nil
}

// Format: Decimal type with 5 fraction digits and greater than zero.
type DecimalElement5ZeroPlusType XsDecimal

func (x DecimalElement5ZeroPlusType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5ZeroPlusType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5ZeroPlusType(v)
	return nil
}

// Format: Decimal between -180 and 180 with 5 decimal positions
type DecimalElementCoordinateType XsDecimal

func (x DecimalElementCoordinateType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElementCoordinateType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElementCoordinateType(v)
	return nil
}

// The DoD Information Technology Portfolio Repository (DITPR) Number.
type DITPRType XsString

func (x DITPRType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DITPRType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DITPRType(v)
	return nil
}

// Department of Defense Activity Address Code (DoDAAC).
type DoDAACType XsString

func (x DoDAACType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DoDAACType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DoDAACType(v)
	return nil
}

// Invalid Department of Defense Activity Address Code (DoDAAC). Used to carry old bad values on Modification/Amendment documents.
type DoDAACType_BadMod XsString

func (x DoDAACType_BadMod) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DoDAACType_BadMod) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DoDAACType_BadMod(v)
	return nil
}

// Duns + 4 format. 9 numeric followed by 4 alphanumeric.
type Duns4NumberType XsString

func (x Duns4NumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *Duns4NumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = Duns4NumberType(v)
	return nil
}

// Duns format. 9 numeric.
type DunsNumberType XsString

func (x DunsNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DunsNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DunsNumberType(v)
	return nil
}

// Federal Activity Address Code (FedAAC), DoD contractor values omitted. (pos 1-2 = "HG", "SD", and "Z0")
type FEDAACType_NoContractor XsString

func (x FEDAACType_NoContractor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *FEDAACType_NoContractor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = FEDAACType_NoContractor(v)
	return nil
}

// Standard format for Government Unique Entity Identifier. Also known as SAMMI.
type GovernmentUniqueEntityIdentiferType XsString

func (x GovernmentUniqueEntityIdentiferType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *GovernmentUniqueEntityIdentiferType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = GovernmentUniqueEntityIdentiferType(v)
	return nil
}

// Six digit non-Procurement Instrument Modification Identifier.
type InstrumentModificationIdentifierType XsString

func (x InstrumentModificationIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *InstrumentModificationIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = InstrumentModificationIdentifierType(v)
	return nil
}

// Four digit Line Item Base.
type LineItemBaseType XsString

func (x LineItemBaseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *LineItemBaseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = LineItemBaseType(v)
	return nil
}

// Military Assistance Program Address Code (MAPAC).
type MAPACType XsString

func (x MAPACType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *MAPACType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = MAPACType(v)
	return nil
}

// Four to fifty character non-DoD procurement instrument number.
type NonDoDNumberType XsString

func (x NonDoDNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *NonDoDNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = NonDoDNumberType(v)
	return nil
}

// Format: Value must be "true" or "false"
type TrueFalseType XsToken

func (x TrueFalseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TrueFalseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TrueFalseType(v)
	return nil
}

// Format: Value must be "true".
type TrueType XsToken

func (x TrueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TrueType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TrueType(v)
	return nil
}
